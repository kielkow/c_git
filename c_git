Comandos git básicos


SUBIR PRO GITHUB
git init 
git status 
git add .
git status 
git commit -m “commit”
git remote add origin <link>
git push origin master 

ATUALIZAR REPOSITÓRIO 
git init 
git status
git add . 
git status
git commit -m “atualização”
git pull origin master
git push origin master 

FORÇAR PUSH:
git push origin master - - force

CLONAR REPOSITÓRIO:
git clone url

MOSTRAR VERSÃO DO PROJETO:
git tag

ALTERA VERSÃO ATUAL POR OUTRA PASSADA:
git checkout versão

VER DIFERENÇA ENTRE DUAS VERSÕES:
git diff v0.1 v0.2 

VER ARQUIVOS CONTROLADOS:
git ls-files

ADD INTERATIVO:
git add -i 

INCLUI NO COMMIT TODOS OS ARQUIVOS REMOVIDOS OU MODIFICADOS:
git commit -a -m “mensagem”

VER HISTÓRICO DE COMMITS:
git log

VER QUAIS ARQUIVOS FORAM ALTERADOS:
git whatchanged 
git whatchanged -p

MOSTRAR REPOSITÓRIOS LOCAIS:
git remote
git remote -v

DAR PUSH SEM ORIGIN E MASTER:
git push -u

VER AS BRANCHS:
git branch

CRIAR BRANCH:
git branch nomedabranch 

MUDAR DE BRANCH:
git checkout nomedabranch

JUNTAR BRANCH LOCAL COM REMOTA:
git push -u origin nomedabranch 

VER BRANCHS REMOTAS:
git branch -r

CRIAR BRANCH REMOTA BASEADA NA LOCAL:
git branch -t nomedabranch origin/nomedabranch 

CRIAR BRANCH E MUDAR PARA ELA:
git checkout -b nomedabranch 

VER BRANCHS REMOTAS E LOCAIS:
git branch -a

REMOVER UMA BRANCH:
git branch -D

REMOVER BRANCH SINCRONIZADA:
git branch -d

CRIAÇÃO DE BRANCH/LINK E MUDANÇA PARA NOVA BRANCH:
git checkout -t

REMOVER BRANCH REMOTA:
git push -d origin nomedabranch 
git push origin :nomedabranch 

VERIFICAR ATUALIZAÇÕES NO REPO DE ATALHO:
git fetch origin

MOSTRAR LISTA DE PROGRAMAS PARA MERGE:
git mergetool --tool-help

UTILIZAR PROGRAMA PARA MERGE:
git mergetool -t nome_do_programa

AJUDA COM A FERRAMENTA DE MERGE:
git mergetool --help

TRAZER COMMITS DE UMA BRANCH PARA OUTRA:
git merge branchcomcommits

ATUALIZAR UMA BRANCH COM BASE EM OUTRA:
git rebase nomedabranchbase branchprecisaatualizar

CONTINUAR REBASE COM CONFLITO:
git rebase - -continue

ABORTAR REBASE COM CONFLITO:
git rebase - -abort

PULAR REBASE COM CONFLITO:
git rebase - -skip

BRANCH PARA TRATAR CONFLITOS:
(no branch)
