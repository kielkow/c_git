Comandos git básicos

SUBIR PRO GITHUB
git init 
git status 
git add .
git status 
git commit -m “commit”
git remote add origin <link>
git push origin master 

ATUALIZAR REPOSITÓRIO 
git init 
git status
git add . 
git status
git commit -m “atualização”
git pull origin master
git push origin master 

FAZER MERGE ENTRE BRANCHS:
git checkout master: altera o local de trabalho para a branch master
git pull: atualiza o histórico da branch master
git checkout dev: altera o local de trabalho para a branch dev
git rebase master: atualiza o HEAD da branch dev para receber as alterações da branch master
git checkout master: altera o local de trabalho novamente para a branch master
git merge dev: mescla as alterações da branch dev na master
git push: envia suas alterações para o repositório remoto

COMMITS ENTRE DOIS PCS:
criar repositorio normal na primeria máquina (master1)
clonar repositorio para segunda (master1)
criar segunda branch na outra maquina (master2)
faço as alteraçoes que quero na segunda branch (master2)
dou um commit na segunda branch (master2)
dou git pull ou git push com origin master2
se quiser pode fazer merge entre master1 e master2

VOLTAR PARA COMMIT ESPECIFICO E DAR PUSH NA BRANCH APARTIR DAQUELE COMMIT:
git reset --hard numerodocommit
git push origin +nomedabranch

PUSH NÃO FUNCIONA:
git pull origin master --allow-unrelated-histories
git push origin master

ATALHO PARA MERGE ENTRE BRANCHS:
[alias]
        publica = !git checkout master && git pull && git checkout dev && git rebase master && git checkout master && git merge dev && git push

DEIXAR BRANCH COLORIDA:
[color]
    branch = auto

FORÇAR PUSH:
git push origin master - -force

CLONAR REPOSITÓRIO:
git clone url

MOSTRAR VERSÃO DO PROJETO:
git tag

ALTERA VERSÃO ATUAL POR OUTRA PASSADA:
git checkout versão

VER DIFERENÇA ENTRE DUAS VERSÕES:
git diff v0.1 v0.2
git diff nomedabranch/nomedabranch 

VER ARQUIVOS CONTROLADOS:
git ls-files

ADD INTERATIVO:
git add -i 

INCLUI NO COMMIT TODOS OS ARQUIVOS REMOVIDOS OU MODIFICADOS:
git commit -a -m “mensagem”

VER HISTÓRICO DE COMMITS:
git log

VER QUAIS ARQUIVOS FORAM ALTERADOS:
git whatchanged 
git whatchanged -p

MOSTRAR REPOSITÓRIOS LOCAIS:
git remote
git remote -v

DAR PUSH SEM ORIGIN E MASTER:
git push -u

VER AS BRANCHS:
git branch

CRIAR BRANCH:
git branch nomedabranch 

MUDAR DE BRANCH:
git checkout nomedabranch

JUNTAR BRANCH LOCAL COM REMOTA:
git push -u origin nomedabranch 

VER BRANCHS REMOTAS:
git branch -r

CRIAR BRANCH REMOTA BASEADA NA LOCAL:
git branch -t nomedabranch origin/nomedabranch 

CRIAR BRANCH E MUDAR PARA ELA:
git checkout -b nomedabranch 

VER BRANCHS REMOTAS E LOCAIS:
git branch -a

REMOVER UMA BRANCH:
git branch -D
git branch -D refactor/paths

REMOVER BRANCH SINCRONIZADA:
git branch -d

CRIAÇÃO DE BRANCH/LINK E MUDANÇA PARA NOVA BRANCH:
git checkout -t

REMOVER BRANCH REMOTA:
git push -d origin nomedabranch 
git push origin :nomedabranch 

VERIFICAR ATUALIZAÇÕES NO REPO DE ATALHO:
git fetch origin

MOSTRAR LISTA DE PROGRAMAS PARA MERGE:
git mergetool --tool-help

UTILIZAR PROGRAMA PARA MERGE:
git mergetool -t nome_do_programa

AJUDA COM A FERRAMENTA DE MERGE:
git mergetool --help

TRAZER COMMITS DE UMA BRANCH PARA OUTRA:
git merge branchcomcommits

ATUALIZAR UMA BRANCH COM BASE EM OUTRA:
git rebase branchatual branchbase

CONTINUAR REBASE COM CONFLITO:
git rebase - -continue

ABORTAR REBASE COM CONFLITO:
git rebase - -abort

PULAR REBASE COM CONFLITO:
git rebase - -skip

BRANCH PARA TRATAR CONFLITOS:
(no branch)

VOLTAR PARA VERSÃO PASSADA DE UM ARQUIVO:
git checkout nomedoarquivo

*Só funciona sem salvar

VOLTAR PARA ÚLTIMO COMMIT DE UM ARQUIVO:
git reset HEAD nomedoarquivo

DESFAZER ÚLTIMO COMMIT:
git reset iddocommit

DESFAZER COMMIT ANTIGO:
git revert iddocommit 

GUARDAR ALTERAÇÕES ANTES DE COMMITAR:
git stash

VER ALTERAÇÕES SALVAS NO STASH:
git stash list

VOLTAR PARA ÚLTIMO STASH:
git stash pop

VOLTAR PARA ÚLTIMO STASH SEM REMOVÊ-LO :
git stash apply

VOLTAR PARA STASH ESPECÍFICO:
git stash apply numerostash

APAGAR STASH:
git stash drop

APAGAR TODOS OS ESTADOS DE STASH:
git stash clear


PROCURAR POR COMMITS ESPECÍFICOS:

•	ATIVAR GIT BISECT:
git bisect start

•	COMMIT RUIM:
git bisect bad hashcommit

•	COMMIT BOM:
git bisect good hashcommit


RESTAURAR ARQUIVO AO ESTADO ORIGINAL COM NOME IGUAL AO DA BRANCH:
git checkout - - nomedoarquivo 

REMOVER ALTERAÇÕES DO HISTÓRICO LOCAL DE COMMITS, DO INDEX E DO WORKING DIRECTORY PERMANENTEMENTE: 
git reset - -hard

REMOVER ALTERAÇÕES DO HISTÓRICO LOCAL DE COMMITS: 
git reset - -soft

REMOVER ALTERAÇÕES DO HISTÓRICO LOCAL DE COMMITS E DO INDEX:
git reset

REFERENCIAR COMMIT ANTIGO:
git reset HEAD~numerodevoltas

DESCARTAR ALTERAÇÕES PERMANENTEMENTE DE COMMIT ANTERIOR:
git reset - -hard HEAD~numerodevoltas

ABRIR ARQUIVO DE CONFIG. DO GIT:
vim ~/.gitconfig

CRIAR ATALHOS NO GIT:
Adicionar no gitconfig [alias]

ADICIONAR COMANDOS NO GITCONFIG:
novonome = nomedocomando
novonome = !git nomedocomando && git nomedocomando

VER UM COMMIT POR LINHA: 
git log - -pretty=online

MOSTRAR MENOS DADOS DO COMMIT:
git log - -pretty=short

MOSTRAR MAIS DADOS DO COMMIT:
git log - -pretty=full 

GERAR MENSAGEM DE COMMIT:
git log - -pretty=‘%a realizou o commit %h : %s’

%a —> Autor do commit
%h —> Hash do commit 
%s —> Título do commit 

VER QUAIS ARQUIVOS FORAM ALTERADOS:
git log -p

VER QUAIS ARQUIVOS FORAM ALTERADOS DE MANEIRA RESUMIDA:
git log - -stat

TRAZER ALTERAÇÕES DE UM REPO. REMOTO:
git fetch nomedabranch 

FAZER MERGE ENTRE BRANCHS REMOTAS:
git merge nomedabranch/nomedabranch 

VER CAMINHOS DO REPO:
git log - -graph 

COMANDO PARA CRIAR ATALHO:
git config --global alias.novocomando comando

PEGAR APENAS UM COMMIT DE OUTRA BRANCH:
git cherry-pick hashdocommit

PEGAR UM COMMIT DE OUTRA BRANCH MAS SALVANDO APENAS NO INDEX:
git cherry-pick -n hashdocommit

PEGAR UM RANGE DE COMMITS ESPECIFICOS:
git cherry-pick hashcommitInicial..hascommitFinal

ACESSAR GIT COLA:
git-cola

EDITAR CONFIG GLOBAL:
git config --global --edit

EDITAR CONFIG GLOBAL NO VSCODE:
git config --global core.editor code
git config --global --edit

MEUS ALIAS:
[user]
	email = matheuskiel@fiorifer.com.br
	name = kielkow
[core]
	editor = code --wait
[push]
	followTags = true
[alias]
	s = !git status -s
	c = !git add --all && git commit -m
	l = !git log --pretty=format:'%C(blue)%h%C(red)%d %C(white)%s - %C(cyan)%cn, %C(green)%cr'

JUNTAR ULTIMO COMMIT COM ATUAL:
git add .
git commit --amend --no-edit

IGNORAR FILE COM ERRO (exemplo):
git add .
git stash push src/infra/db/mongodb/account-repository

REMOVER FILE DA LISTA DE STASH PARA COMO ESTAVA ANTES:
git stash pop

LIMPAR CACHE:
git rm -r --cached .

ADICIONAR UMA TAG:
git tag -a "1.0.0" -m "1.0.0"

MOSTRAR TAG DO REPO:
git tag

ENVIAR TODAS AS TAGS PARA O REPO:
git push origin master --tags

ENVIAR APENAS TAGS DO TIPO ANNOTATED:
git push origin master --follow-tags

RENOMEAR BRANCH:
git checkout <old_name>
git branch -m <new_name>
git push origin -u <new_name>
git push origin --delete <old_name>

DELETAR COMMITS:
git reset {hash-do-commit-desejado} --hard
git push origin master --force

REMOVER ARQUIVOS COMO UNTRACKED DO STASH:
git clean -df

DELETAR TAG:
git tag -d "2.0.0"

DELETAR ARQUIVO GIT:
rm -fr .git

PERMITIR QUE O GIT FAÇA O MERGE DE DOIS PROJETOS COM HISTÓRICOS DIFERENTES
git pull origin master --allow-unrelated-histories

COMANDO PARA GERAR BRANCH À PARTIR DE UM DETERMINADO COMMIT:
git branch <branch_name> <commit_id>

GIT CREDENTIALS
git config --list --show-origin
git config --global user.email "email@geeks.ai"
git config --global user.name "GeeksforGeeks"
